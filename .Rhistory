install.packages("KernSmooth")
library(KernSmooth)
?lm
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
names(p)
names(unclass(p))
p$zone
p$hour
p$min
p$mon
p
p$mday
p$mon
p$year
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
q
bye
swirl()
quit()
swirl()
library(swirl())
swirl()
12
5+7
x <- 5 +7
x
y < x - 3
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 ==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints)
any(ints<0)
all(ints)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},
| 6)
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(dat()))]},c(8,4,0))
evaluate(function(x){xlength(dat())},c(8,4,0))
evaluate(function(x){x[length(dat())]},c(8,4,0))
evaluate(function(x){xlength(x())},c(8,4,0))
evaluate(function(x){x[length(x())]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Come home this holidays!")
submit()
submit()
submit()
mad_libs("sundarban","huge","tigers")
submit()
'I' "%p%" 'love' "%p" 'R!'
info()
"I" "%p%" "love" "%p%" "R!"
'I' "%p%" 'love' "%p%" 'R!'
Test %p% document
"Test" "%p%" "document"
skip()
quit()
printmessage <- function(x) {}
printmessage <- function(x) {}
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(10)
printmessage(0)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(10)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
#invisible(x)
}
t <- printmessage(11)
t
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
y <- printmessage(25)
y
t
library("swirl", lib.loc="~/R/win-library/3.3")
ls()
rm(list=ls())
swirl()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
?iris
viewinfo()
viewinfo(iris)
library(datasets)
data("iris")
?iris
head(iris)
str(iris)
summary(iris)
length(iris)
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
class(tapply(mtcars$hp,mtcars$cyl,mean))
out <- tapply(mtcars$hp,mtcars$cyl,mean)
out
out[1]
abs(out[3])
abs(out[3]) - abs(out[1])
abs(out[3]-out[1])
out[3]-out[1]
debug(ls)
ls()
quit
quit()
str(iris)
source("http://bioconductor.org/bioLite.R")
source("https://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "dac2e7ab633fc50268d4",
secret = "08294a6c8ae6e40c822bff9ee061964cc1e3d4ff")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
install.packages("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "dac2e7ab633fc50268d4",
secret = "08294a6c8ae6e40c822bff9ee061964cc1e3d4ff")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "dac2e7ab633fc50268d4",
secret = "08294a6c8ae6e40c822bff9ee061964cc1e3d4ff")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
gtoken
myapp
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
req
curl https://api.github.com/?access_token=OAUTH-TOKEN
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "dac2e7ab633fc50268d4",secret = "08294a6c8ae6e40c822bff9ee061964cc1e3d4ff")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
View(req)
str(req)
class(req)
req$url
req$date
req$headers
req$headers[1]
req$headers[2]
req$headers["Link"]
req$headers["Link"][1]
req$headers["Link"][2]
req$headers["Link"][3]
req$all_headers
req$cookies
req$cookies["value"]
req$cookies["domain"]
req$cookies[1]
req$content
req$handle
req$request
View(req)
req[["url"]]
req[["url"]][1]
req[["url"]][2]
install.packages("sqldf")
install.packages("RMySQL")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",stringsAsFactors = FALSE)
class(acs)
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode = readlines(con)
htmlcode = readLines(con)
close(con)
htmlcode
htmlcode[10]
htmlcode[20]
nchar(htmlcode[10])
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),skip=4,widths=c(12, 7,4, 9,4, 9,4, 9,4))
class(x)
head(x)
sum(x$V4)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ydm_hms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment,now)
this_moment <- update(this_moment, hours = 22, minutes = 49)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(s)
depart <- nyc + days(2)
depart
update(depart,hours=17,minutes=34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive,tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?interval
how_long <- interval(arrive,last_time,tzone = tz(start()))
how_long
how_long <- arrive %--% last_time
how_long <- interval(arrive, last_time)
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
0
quit
quit()
head(result.final)
rm(list=ls())
swirl()
library(swirl)
swirl()
plot(faithful,eruptions,waiting)
with(faithful, plot(eruptions,waiting))
with(faithful, plot(eruptions,waiting,main="old Faithful Geyser data"))
title(main = "old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=true)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
info()
play()
dev.cur()
dev.set(2)
dev.cur()
?dev
dev.off()
dev.cur()
dev.set(2)
dev.cur()
nxt()
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="month",ylab="Ozone(ppb),col.axis="blue",col.lab="red"")
boxplot(Ozone~Month,airquality,xlab="month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red"")
)
)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
bye()
ColNames <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3")
data.file <- read.table("household_power_consumption.txt",sep=";",header = TRUE, na.strings = "?",col.names = ColNames)
data.analysis <- data.file[data.file$Date %in% c("1/2/2007","2/2/2007"),]
setwd("C:/Users/Sameer/Documents/GitHub/ExData_Plotting1/ExData_Plotting1")
